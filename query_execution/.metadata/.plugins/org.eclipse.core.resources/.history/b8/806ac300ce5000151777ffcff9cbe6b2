package etienne.dbpedia_execution;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;

public class DBPediaExecution {

	public void executeQuery(String originalQuestion, String queryString, QueryType queryType, String answerType) {

		// (1) Execute Query
		Query query = QueryFactory.create(queryString);
		
		QueryExecution qexec = QueryExecutionFactory.sparqlService(
				"http://dbpedia.org/sparql", query);

		// Analyze results
		
		try {
			
			ResultSet results;
			
			switch(queryType)
			{
				case ASK: 
					Boolean queryresult = qexec.execAsk();
					
					// ,,,
					
					if(queryresult)
						System.out.println("Yes, " + originalQuestion);
					else
						System.out.println("It is not true that " + originalQuestion);
					
					break;
				case SELECT:
					results = qexec.execSelect();
					
					for (; results.hasNext();) {
						QuerySolution soln = results.nextSolution();
						
						System.out.println("instance found:" + soln.get("?c"));
						
						String instance = soln.get("?c").toString();
						
						String newQuery = "PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +
										  "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
										  "ASK " +
										  "{ <" + instance + "> rdf:type " + answerType + " . } ";
						
						Query validationQuery = QueryFactory.create(newQuery);
						
						Boolean validationResult = qexec.execAsk();
						
						System.out.println(validationResult.toString());

					}
					
					// ...
					
					break; 
				case COUNT:
					
					results = qexec.execSelect();
					
					for (; results.hasNext();) {
						QuerySolution soln = results.nextSolution();
					}
					break;	
			}
	

		//		System.out.println(soln.get("?name"));
		} catch (Exception e) {

			e.printStackTrace();
		}

		finally {
			qexec.close();
		}
	}
}
