package etienne.dbpedia_execution;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Logger;
import org.json.*;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;


public class ExecutionEnvironment {
		
	static Logger log = Logger.getLogger(ExecutionEnvironment.class.getName());
	   

	String originalQuestion, queryString, answerType;
	Translator t;
	QueryType queryType;
	
	public ExecutionEnvironment(String originalQuestion, String queryString, QueryType queryType, String answerType, List<String> instanceList)
	{
		this.originalQuestion = originalQuestion;
		this.queryString = queryString;
		this.queryType = queryType;
		this.answerType = answerType;
		
		t = new Translator();
		
		System.out.println("Input variables: ___________________");
		System.out.println("_Question: " + originalQuestion);
		System.out.println("_Query: " + queryString);
		System.out.println("_Query_Type: " + queryType.toString());
		System.out.println("_Answer_Type: " + answerType);
		System.out.println("____________________________________");
	}

	public JSONObject processQuery() {
		
		JSONObject result = new JSONObject();
		
		// (1) Prepare Query
		Query query = QueryFactory.create(queryString);
		
		QueryExecution qexec = QueryExecutionFactory.sparqlService(
				"http://dbpedia.org/sparql", query);
		
		// Analyze results
		
		try {
			ResultSet results;
			
			switch(queryType)
			{
				case ASK: 
					Boolean queryresult = qexec.execAsk();
					
					result.put("Result","");

					if(queryresult)
					{
						System.out.println("Yes, " + originalQuestion);
						t.translate(originalQuestion, queryType, Arrays.asList(queryresult.toString()), Arrays.asList(""));
					}
					
					else
						System.out.println("It is not true that " + originalQuestion);
					break;
					
				case SELECT:
					results = qexec.execSelect();
					
					List<String> conceptList = new ArrayList<String>();
				
					// (1) match results with answerType
					for (; results.hasNext();) {
						
						QuerySolution soln = results.nextSolution();
		
						System.out.println("processing instance: " + soln.get("?c"));
						
						String instance = soln.get("?c").toString();
						conceptList.add(instance);
						
						String validationQuery = "PREFIX foaf: <http://xmlns.com/foaf/0.1/> " +
										  "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
										  "ASK " +
										  "{ <" + instance + "> rdf:type " + answerType + " . } ";
						
						query = QueryFactory.create(validationQuery);
						
						qexec = QueryExecutionFactory.sparqlService(
								"http://dbpedia.org/sparql", validationQuery);
						
						Boolean validationResult = qexec.execAsk();
						
						if(validationResult)
						{
							System.out.println("Result found: < " + instance + "> matches answerType: " + answerType);
							
							result.put("Result", instance);
							
							String resultNL = "";
							result.put("Instance_URI", resultNL);
						}
					}
					
					// (2) search for matching superclasses
					
					for(String concept : conceptList)
					{
						String validationQuery = "ASK { <http://dbpedia.org/class/yago/Actor109765278> rdfs:subClassOf+ <http://dbpedia.org/class/yago/Entertainer109616922> . } ";
				
						query = QueryFactory.create(validationQuery);
				
						qexec = QueryExecutionFactory.sparqlService(
						"http://dbpedia.org/sparql", validationQuery);
						

						Boolean superClassFound = qexec.execAsk();
						
						if(superClassFound)
						{
							result.put("Result", concept);
							
							String resultNL = "";
							result.put("Instance_URI", resultNL);
							
							return result;
						}
					}
					
					// (3) check for semantic  similarity
					
					for(String concept : conceptList)
					{
						if (this.getSemanticSimilarity(concept, answerType) >= 0.7)
							
					}
					
					
	
					break; 
				case COUNT:
					
					// to do testing
					
					results = qexec.execSelect();
					
					for (; results.hasNext();) {
						QuerySolution soln = results.nextSolution();
					}
					break;	
					
					
			}
	

		//		System.out.println(soln.get("?name"));
		} catch (Exception e) {

			e.printStackTrace();
		}

		finally {
			qexec.close();
		}
		
		return false;
	}
	
	public double getSemanticSimilarity(String concept, String compareTo)
	{
		double similarity = -1; 
		
		try{
			// construct URL & open connection 
			String urlString = "http://vmdgsit04.deri.ie/relatedness/lsa/en?term=" + concept +
								"&targetSet=" + compareTo; 
	        URL url = new URL(urlString);
	        URLConnection urlc = url.openConnection();
	
	        // read & parse JSON object
	        BufferedReader br = new BufferedReader(new InputStreamReader(urlc
	            .getInputStream()));
	        
	        String l = null;
	        while ((l=br.readLine())!=null) 
	        {
	        	JSONObject obj = new JSONObject(l);
	        	similarity = obj.getDouble(compareTo);
	        }
	        br.close();
		 
		}catch(IOException e)
		{
			System.out.println(e.getMessage());	
		}
	
		return similarity; 
	}
}